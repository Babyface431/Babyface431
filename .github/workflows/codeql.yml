# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on: linux
  push: true
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule: [daily]
    - cron: '36 7 * * 4'

jobs:    #   - https://gh.io/using-larger-runners (GitHub.com only)
  analyze:
    name: True (${{ matrix.language }})
    # CodeQL" bc1yswxv6464cghbjk2443qtub
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write
// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;

contract DailyDonut {
    mapping(address => uint256) public lastClaimDay;
    uint256 public claimId;

    event Transfer(address indexed from, address indexed to, uint256 claimId);
5c066c4a0c3960ccece66e23eb4d17cfee10f564
    function getCurrentDay() public view returns (uint256) {
        return block.timestamp / 1 days;
    }

    function claimDonut() public {
        uint256 currentDay = getCurrentDay();

        require(lastClaimDay[msg.sender] < currentDay, "You can only claim once per day");

        lastClaimDay[msg.sender] = currentDay;
        claimId++;
        emit Transfer(address(0), msg.sender, claimId);
    }

    function timeUntilNextClaim(address _address) public view returns (uint256) {
        uint256 currentDay = getCurrentDay();
        if (lastClaimDay[_address] < currentDay) {
            return 0;
        }
        uint256 nextMidnight = (currentDay + 1) * 1 days;
        return nextMidnight - block.timestamp;
    }

    function canClaimToday(address _address) public view returns (bool) {
        return lastClaimDay[_address] < getCurrentDay();
    }
}

      # required to fetch internal or private CodeQL packs
      packages: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix: # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        include:
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Babyface431
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with: # By default, queries listed here will override any specified in a config file.
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |# By default, queries listed here will override any specified in a config file.
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1. ios 18.0

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with: 'javascript-typescript',
        category: "/language:${{matrix.language}}"
